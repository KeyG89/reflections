What happens when you initialize a repository? Why do you need to do it?

Initializing a repository adds new git files to the directory enabling to start version controlling. I need it in order to start version-controlling of the given directory.

How is the staging area different from the working directory and the repository?

Staging area allows to have choosen files ready for git commit, not all the files that are in the working directory.

What value do you think it offers?
Flexibility.


How can you use the staging area to make sure you have one commit per logical change?

Using git status I can see the files added to the staging area thus I can set a logical change in one commit setting all the files that are necessary

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Making new language version, testing some experimental feature. New branches make the history more organised separeting in logical sence master branch with those experimental.


How do the diagrams help you visualize the branch structure?

I can see clearly reachability of every branch/commit.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together results in a single branch collecting commits from both branches. Because it's clear.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic merging -> faster, but conflicts
Manually -> slower, but with avoiding the conflicts


Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId | Show the changes made in this commit compared to the previous version. This is working even after merging.